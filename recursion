/// 1.	Write a C code to find the sum of the following series using RECURSIVE FUNCTIONS:
///1^2 + 2^2 + 3^2 + … + N^2

#include<stdio.h>
int sum(int n)
{
    if(n==0)
        return 0;
    else
        return (sum(n-1)+(n*n));
}
int main()
{
    int n;
    scanf("%d",&n);
    printf("%d",sum(n));
}


//2.	Write a C program using recursive function to find the inverse product of 1st n natural numbers.
// E.g. for n= 5, the function should return (1/5) * (1/4) *(1/3) * (1/2) *(1/1) = 1/120 =0.00833

#include<stdio.h>
float bw(int n)
{
    if(n==1)
    return 1;

    else
        return (bw(n-1)*(1.0/n));
}
int main()
{
    int n;
    scanf("%d",&n);
    float r=bw(n);
    printf("%f",r);
    return 0;
}
//3.	Compute the value of ab using recursion, where a and b are integers.



#include<stdio.h>
int power(int a,int b)
{
    if(b==0)
        return 1;
    else if(a==0)
        return 0;
    else
        return (power(a,b-1)*a);
}
int main()
{
    int a,b;
    scanf("%d%d",&a,&b);
    int r=power(a,b);
    printf("%d",r);
    return 0;
}
// 1 + r + r2 + … + rn (read the values of r and n from user)
//	Compute the sum of the above geometric progression using recursion.

#include<stdio.h>
#include<math.h>
int sum(int n,int r)
{
    if(n==0)
        return 1;
    else
        return pow(r,n)+sum(r,n-1);
}
int main()
{
    int n,r;
    printf("enter n and r:");
    scanf("%d%d",&n,&r);
    int  result=sum(n,r);
    printf("%d",result);
    return 0;
}
///	 Write a C code to find the sum of the following series using recursion:
///  1/1! + 2/2! + 3/3! + ……1/N!

#include<stdio.h>
int fact(int n)
{
    int factorial=1;
    for(int i=1;i<=n;i++)
    {
        factorial*=i;
    }
    return factorial;
}
float sum(int n)
{
    if(n==1)
        return 1.0;
    else
        return (float)n/fact(n)+sum(n-1);
}
int main()
{
    int n;
    scanf("%d",&n);
    printf("%f",sum(n));
    return 0;
}

///	Write a C program to compute sum of digits of a given number using recursion.
/// Sample input/output:
/// Enter an integer: 5431
/// Sum of digits = 13


#include<stdio.h>
int sum(int n)
{                       
        int rem,temp;
        temp=n;
        rem=temp%10;
        temp=temp/10;
        if(rem==0)
            return 0;
        else
            return sum(temp)+rem;
}
int main()
{
    int n;
    printf("enter n : ");
    scanf("%d",&n);
    int result=sum(n);
    printf("%d",result);
    return 0;
}

/* Write a C program to print the digits of a given number in words using recursion.
Sample input/output:
Enter an integer: 5431	
Number in words: Five Four Three One
*/


#include<stdio.h>
void word(int n)
{
    int a;
    if(n==0)
        return;
    else
        a=n%10;
        word(n/10);
        switch(a)
        {
            case 1:printf("one");
                        break;
            case 2:printf("two");
                        break;
            case 3:printf("three");
                        break;
            case 4:printf("four");
                        break;
            case 5:printf("five");
                        break;
            case 6:printf("six");
                        break;
            case 7:printf("seven");
                        break;
        case 8:printf("eight");
                        break;
        case 9:printf("nine");
                        break;

        case 10:printf("ten");
                        break;
        }
}
int main()
{
    int n;
    scanf("%d",&n);
    word(n);
}



///find maximum number from array using recursion



#include<stdio.h>
int max(int ara[],int n,int m)
{
    if(n>-1)
    {
        if(ara[n]>m)        ///for minimum change this ' < '
            {
                m=ara[n];
            }
        return max(ara,n-1,m);
    }
    else
    {
        return m;
    }
}
int main()
{
    int n;
    printf("enter n : ");
    scanf("%d",&n);
    int ara[n];
    printf("enter array element  :");
    for(int i =0;i<n;i++)
    {
        scanf("%d",&ara[i]);
    }
    int m=ara[0];
    int result = max(ara,n-1,m);
    printf("the big is  : %d",result);
    return 0;

}
